<?php

use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;


function add_course_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
  $current_user = \Drupal::currentUser();

  if ($current_user->hasPermission('enroll_permission') || $current_user->hasPermission('withdraw_permission')) {
    if ($entity->getEntityTypeId() === 'node') {
      /** @var NodeInterface $node */
      $node = $entity;
      if ($node->bundle() === 'course') {
        $nid = $node->id();
        $operation = 'enroll';
        $current_user_id = $current_user->id();
        $user_entity = User::load($current_user_id);
        if ($user_entity->hasField('field_enroll_courses')) {
          $field = $user_entity->get('field_enroll_courses');
          foreach ($field as $delta => $item) {
            $field_node = $item->entity;
            if ($field_node->id() === $nid) {
              $operation = 'withdraw';
              break;
            }
          }
          return _add_courses_entity_operation_build_operation($operation, $nid);
        }
      }
    }
  }
}

function _add_courses_entity_operation_build_operation(string $operation, int $node_id) {
  $operations = [];
  if ($operation === 'enroll') {
    $operations['enroll'] = [
      'title' => t('Enroll'),
      'url' => \Drupal\Core\Url::fromRoute('add_course.enroll_course', ['node' => $node_id]),
      'weight' => 50,
    ];
  }
  if ($operation === 'withdraw') {
    $operations['withdraw'] = [
      'title' => t('Remove course'),
      'url' => \Drupal\Core\Url::fromRoute('add_course.withdraw_course', ['node' => $node_id]),
      'weight' => 50,
    ];
  }
  
  return $operations;
}








